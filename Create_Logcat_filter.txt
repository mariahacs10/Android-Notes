
Android Activity State Changes by Example
to call the super class instance of the method before setting up the user interface for the activity. We will now
modify this method so that it outputs a diagnostic message in the Android Studio Logcat panel each time it
executes. For this, we will use the Log class, which requires that we import android.util.Log and declare a tag that
will enable us to filter these messages in the log output:
package com.ebookfrenzy.statechange;
.
.

	SEE EVERYTHING ON PAGE 98 - 102

IMPORTANT ADD  to the main_activity

import android.util.Log;

import androidx.annotation.NonNull; 

-----------------------------------------------
public class MainActivity extends AppCompatActivity {
private ActivityMainBinding binding;

-----------------------------------------------
IMPORTANT ADD this to the main_activity

private static final String TAG = "StateChange"; 

----------------------------------------------

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
binding = ActivityMainBinding.inflate(getLayoutInflater());
View view = binding.getRoot();
setContentView(view);

---------------------------------------------

IMPORTANT ADD THIS to the onCreate method in main_activity

Log.i(TAG, "onCreate"); 
}
}

-------------------------------------------------

The next task is to override some more methods, with each one containing a corresponding log call. These
override methods may be added manually or generated using the Alt-Insert keyboard shortcut as outlined in the
chapter entitled “The Basics of the Android Studio Code Editor”. Note that the Log calls will still need to be added
manually if the methods are being auto-generated:
@Override
protected void onStart() {
super.onStart();
Log.i(TAG, "onStart");
}
@Override
protected void onResume() {
super.onResume();
Log.i(TAG, "onResume");
}
@Override
protected void onPause() {
super.onPause();
Log.i(TAG, "onPause");
99
Android Activity State Changes by Example
}
@Override
protected void onStop() {
super.onStop();
Log.i(TAG, "onStop");
}
@Override
protected void onRestart() {
super.onRestart();
Log.i(TAG, "onRestart");
}
@Override
protected void onDestroy() {
super.onDestroy();
Log.i(TAG, "onDestroy");
}

@Override
protected void onSaveInstanceState(@NonNull Bundle outState) {
super.onSaveInstanceState(outState);
Log.i(TAG, "onSaveInstanceState");
}

@Override
protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {
super.onRestoreInstanceState(savedInstanceState);
Log.i(TAG, "onRestoreInstanceState");
}

14.4 Filtering the Logcat Panel
The purpose of the code added to the overridden methods in MainActivity.java is to output logging information
to the Logcat tool window. This output can be configured to display all events relating to the device or emulator
session, or restricted to those events that relate to the currently selected app. The output can also be further
restricted to only those log events that match a specified filter.
Display the Logcat tool window and click on the filter menu (marked as B in Figure 14-3) to review the available
options. When this menu is set to Show only selected application, only those messages relating to the app selected
in the menu marked as A will be displayed in the Logcat panel. Choosing No Filters, on the other hand, will
display all the messages generated by the device or emulator.
100
Android Activity State Changes by Example
Figure 14-3
Before running the application, it is worth demonstrating the creation of a filter which, when selected, will
further restrict the log output to ensure that only those log messages containing the tag declared in our activity
are displayed.
From the filter menu (B), select the Edit Filter Configuration menu option. In the Create New Logcat Filter dialog
(Figure 14-4), name the filter Lifecycle and, in the Log Tag field, enter the Tag value declared in MainActivity.java
(in the above code example this was StateChange).
Figure 14-4
Enter the package identifier in the Package Name field and, when the changes are complete, click on the OK
button to create the filter and dismiss the dialog. Instead of listing No Filters, the newly created filter should now
be selected in the Logcat tool window.
