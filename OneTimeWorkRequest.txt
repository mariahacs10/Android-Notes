1/19/2022

Video link:   https://www.youtube.com/watch?v=hKOKZ0RRgBE

Step 1.  Add WorkManager to your app 

implementation "android.arch.work:work-runtime:1.0.0-alpha11"

Step 2. Make your first WorkRequest
Go create a myWorker class and write:

public static final String KEY_TASK_OUTPUT = "key_task_output";
    public MyWorker(@NonNull Context context, @NonNull WorkerParameters workerParams) {
        super(context, workerParams);
    }

Override and implement doWork()

    @NonNull
    @Override
    public Result doWork() {

Create Data input object
        Data data = getInputData();
        String desc = data.getString(MainActivity.KEY_TASK_DESC);
        displayNotification("Hello i am your work, ", desc);

        Data data1 = new Data.Builder()
                .putString(KEY_TASK_OUTPUT, "Task Finished successfully")
                .build();

        return Result.success(data1);

    }

    private void displayNotification(String task, String desc)
    {
        NotificationManager manager =
                (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);

        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
        {
            NotificationChannel channel = new NotificationChannel("testingcoding", "testcoding", NotificationManager.IMPORTANCE_DEFAULT);
            manager.createNotificationChannel(channel);
        }
        NotificationCompat.Builder builder = new NotificationCompat.Builder(getApplicationContext(), "testingcoding")
                .setContentTitle(task)
                .setContentText(desc)
                .setSmallIcon(R.mipmap.ic_launcher);

        manager.notify(1, builder.build());

    }
}

Step 3: Go under the activity_main and write:

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">


    <Button
        android:id="@+id/button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="328dp"
        android:text="Submit"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent" />

    <TextView
        android:id="@+id/textView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginStart="36dp"
        android:layout_marginBottom="32dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

Step 4: Go under the MainActivity and write:
package com.example.onetimework;


import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;


import androidx.lifecycle.Observer;
import androidx.work.Constraints;
import androidx.work.Data;
import androidx.work.NetworkType;
import androidx.work.OneTimeWorkRequest;
import androidx.work.WorkInfo;
import androidx.work.WorkManager;

import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

import java.util.List;

public class MainActivity extends AppCompatActivity {

    public static final String KEY_TASK_DESC = "key_task_desc";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

//        LoadingDialog loadingDialog = new LoadingDialog(MainActivity.this);

        Data data = new Data.Builder()
                .putString(KEY_TASK_DESC, "Work Data sending..")
                .build();

        Constraints constraints = new Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build();
	
//Pass the Data object to WorkRequest
        OneTimeWorkRequest request = new OneTimeWorkRequest.Builder(MyWorker.class)
                .setConstraints(constraints)
                .setInputData(data)
                .build();
        findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                WorkManager.getInstance().enqueue(request);
//                loadingDialog.startLoadingDialog();
            }
        });


        final TextView textView = findViewById(R.id.textView);

        WorkManager.getInstance().getWorkInfoByIdLiveData(request.getId())
                .observe(this, new Observer<WorkInfo>() {
                    @Override
                    public void onChanged(@Nullable WorkInfo workInfo) {

                            if(workInfo != null) {

                                if(workInfo.getState().isFinished())
                                {
                                    Data data = workInfo.getOutputData();

                                    String output = data.getString(MyWorker.KEY_TASK_OUTPUT);

                                    textView.append(output);
                                }

                                String status = workInfo.getState().name();
                                textView.append(status + "\n");
                            }
                    }
                });


    }
}

Then your done




